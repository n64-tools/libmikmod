trigger:
  branches:
    include: ["master", "trunk", "develop*", "n64-*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore", "README.md" ]

jobs:
- job: Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: |
      curl -L https://github.com/N64-tools/mips64-gcc-toolchain/releases/download/10.2.0/gcc-toolchain-mips64-win64.zip --output gcc-toolchain-mips64-win64.zip
      curl -L https://github.com/N64-tools/libdragon/releases/download/v0.0.1-alpha.1/libdragon-win64.zip --output libdragon-win64.zip
    displayName: 'Get dependencies'
    continueOnError: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'gcc-toolchain-mips64-win64.zip' 
      destinationFolder: toolchain/gcc-toolchain-mips64
      cleanDestinationFolder: false 
    displayName: 'Extract gcc-toolchain-mips64-win64'
    continueOnError: false

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'libdragon-win64.zip' 
      destinationFolder: toolchain/libdragon
      cleanDestinationFolder: false 
    displayName: 'Extract libdragon-win64'
    continueOnError: false

  - bash: |
      sed -i -- 's|rm -f \*\.o \*\.a|DEL /F \*\.o \*\.a|g' $BUILD_SOURCESDIRECTORY/n64/Makefile
      sed -i -- 's|rm -f $(CURDIR)/build/*|RD /S /Q $(CURDIR)/build|g' $BUILD_SOURCESDIRECTORY/n64/Makefile
      sed -i -- 's|-I$(N64_INST)/mips64-elf/include -I$(CURDIR)/../include/ -I$(CURDIR)/|-I$(N64_INST)/mips64-elf/include -I$(CURDIR)/../include/ -I$(CURDIR)/  -I$(CURDIR)/../toolchain/libdragon/include|g' $BUILD_SOURCESDIRECTORY/n64/Makefile
    displayName: 'Adjust Make Files for Windows'
    continueOnError: false
    
  - script: |
      set N64_INST="%BUILD_SOURCESDIRECTORY%\toolchain\gcc-toolchain-mips64"
      set PATH=%PATH%;%BUILD_SOURCESDIRECTORY%\toolchain\gcc-toolchain-mips64\bin
      cd %BUILD_SOURCESDIRECTORY%\n64
      make
    displayName: 'Build Lib'
    continueOnError: false

  - bash: |
      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/include/
      cp "$BUILD_SOURCESDIRECTORY/include/mikmod.h" "$BUILD_ARTIFACTSTAGINGDIRECTORY/include/"

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/lib/
      cp "$BUILD_SOURCESDIRECTORY/n64/"*.a "$BUILD_ARTIFACTSTAGINGDIRECTORY/lib/"
    displayName: 'Move Artifacts to Staging Directory'
    continueOnError: false

  # Publish build artifacts to Azure Artifacts/TFS or a file share
  - task: PublishBuildArtifacts@1
    displayName: Publish Build Artifacts
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'libmikmod' 
      publishLocation: 'Container' # Options: container, filePath
      #targetPath: # Required when publishLocation == FilePath
      parallel: true # Optional
      #parallelCount: # Optional
      
  # Archive Files
  # Archive files using compression formats such as .7z, .rar, .tar.gz, and .zip.
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)' 
      includeRootFolder: false
      archiveType: 'zip' # Options: zip, 7z, tar, wim
      #tarCompression: 'gz' # Optional. Options: gz, bz2, xz, none
      archiveFile: '$(Build.ArtifactStagingDirectory)/libmikmod.zip' 
      #replaceExistingArchive: true

  - task: AzureFileCopy@3
    inputs:
      sourcePath: '$(Build.ArtifactStagingDirectory)\*.zip'
      azureSubscription: 'MsdnAzureServiceRole'
      Destination: 'AzureBlob'
      storage: 'n64tools'
      ContainerName: 'binaries'
      blobPrefix: 'N64-tools/libs/$(Build.SourceBranchName)/latest/'
      outputStorageUri: 'outputStorageUri'
    displayName: Upload program to Blob storage
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

#  - task: GithubRelease@0 
#    displayName: 'Create GitHub Release'      
#    inputs:
#      gitHubConnection: libmikmod
#      repositoryName: N64-tools/libmikmod
#      #tagSource: manual
#      #tag: $(Build.BuildNumber)      
#      assets: |
#           $(Build.ArtifactStagingDirectory)/*
#      isDraft: true # Optional
#      action: 'create' # Options: create, edit, delete
#      target: '$(Build.SourceVersion)' # Required when action == Create || Action == Edit
#      tagSource: 'auto' # Required when action == Create# Options: auto, manual
